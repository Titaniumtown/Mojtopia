From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ysl3000 <yannicklamprecht@live.de>
Date: Sat, 25 Jul 2020 16:06:11 +0200
Subject: [PATCH] Toothpick


diff --git a/pom.xml b/pom.xml
index 594ab9afbd6249df8817eeb4eb50bffc986bfce1..32dc9902508626c5a37ad451cad80cc0494f2d36 100644
--- a/pom.xml
+++ b/pom.xml
@@ -153,6 +153,10 @@
             <id>spigotmc-public</id>
             <url>https://hub.spigotmc.org/nexus/content/groups/public/</url>
         </repository>
+        <repository>
+            <id>aikar</id>
+            <url>https://repo.aikar.co/content/groups/aikar/</url>
+        </repository>
     </repositories>

     <pluginRepositories>
diff --git a/src/main/java/net/minecraft/core/BlockPos.java b/src/main/java/net/minecraft/core/BlockPos.java
index 24e97d4e2c5777578bb7ccc57071b83ac66aa420..2c96aacc01e98cb9a2f4e9e81a8529aa82f223b6 100644
--- a/src/main/java/net/minecraft/core/BlockPos.java
+++ b/src/main/java/net/minecraft/core/BlockPos.java
@@ -118,6 +118,9 @@ public class BlockPos extends Vec3i {
         return this.offset(-baseblockposition.getX(), -baseblockposition.getY(), -baseblockposition.getZ());
     }

+    public BlockPos up() { // Toothpick
+        return above();
+    }
     @Override
     public BlockPos above() {
         return new BlockPos(this.getX(), this.getY() + 1, this.getZ()); // Paper - Optimize BlockPosition
diff --git a/src/main/java/net/minecraft/core/IdMapper.java b/src/main/java/net/minecraft/core/IdMapper.java
index b8499312bb21a5f75796e04cf3ec3e200e5e93b2..f93892e79b2b31bf37bcfc811a76cedd97338b9d 100644
--- a/src/main/java/net/minecraft/core/IdMapper.java
+++ b/src/main/java/net/minecraft/core/IdMapper.java
@@ -41,12 +41,6 @@ public class IdMapper<T> implements IdMap<T> {
         this.addMapping(t0, this.nextId);
     }

-    // Paper start - decompile fix
-    @Override
-    public int getId(T t) {
-        return getId(t);
-    }
-    // Paper end

     public int getId(T t0) {
         Integer integer = (Integer) this.tToId.get(t0);
diff --git a/src/main/java/net/minecraft/core/SectionPos.java b/src/main/java/net/minecraft/core/SectionPos.java
index 544d3443f34b5ec4be9c6a734eab3888bf5784bb..2cf6a7a4b592c0543e89973f3daeba955324e5bc 100644
--- a/src/main/java/net/minecraft/core/SectionPos.java
+++ b/src/main/java/net/minecraft/core/SectionPos.java
@@ -142,7 +142,6 @@ public class SectionPos extends Vec3i {
         return (this.z() << 4) + 15;
     }

-    public static long blockToSection(long i) { return blockToSection(i); } // Paper - OBFHELPER
     public static long blockToSection(long i) {
         // b(a(BlockPosition.b(i)), a(BlockPosition.c(i)), a(BlockPosition.d(i)));
         return (((long) (int) (i >> 42) & 4194303L) << 42) | (((long) (int) ((i << 52) >> 56) & 1048575L)) | (((long) (int) ((i << 26) >> 42) & 4194303L) << 20); // Simplify to reduce instruction count
@@ -171,7 +170,6 @@ public class SectionPos extends Vec3i {
         return (((long) (i >> 4) & 4194303L) << 42) | (((long) (j >> 4) & 1048575L)) | (((long) (k >> 4) & 4194303L) << 20);
     }
     // Paper end
-    public static long asLong(int i, int j, int k) { return asLong(i, j, k); } // Paper - OBFHELPER
     public static long asLong(int i, int j, int k) {
         return (((long) i & 4194303L) << 42) | (((long) j & 1048575L)) | (((long) k & 4194303L) << 20); // Paper - Simplify to reduce instruction count
     }
diff --git a/src/main/java/net/minecraft/core/Vec3i.java b/src/main/java/net/minecraft/core/Vec3i.java
index cdb8c1a701e82286791b59723df7b383218efd23..862f1043cb006ca4171d2a0f1ba058f8fd48626d 100644
--- a/src/main/java/net/minecraft/core/Vec3i.java
+++ b/src/main/java/net/minecraft/core/Vec3i.java
@@ -18,9 +18,9 @@ public class Vec3i implements Comparable<Vec3i> {
         return IntStream.of(new int[]{baseblockposition.getX(), baseblockposition.getY(), baseblockposition.getZ()});
     });
     public static final Vec3i ZERO = new Vec3i(0, 0, 0);
-    public int x;public final void setX(final int x) { this.x = x; } // Paper - OBFHELPER
-    public int y;public final void setY(final int y) { this.y = y; } // Paper - OBFHELPER
-    public int z;public final void setZ(final int z) { this.z = z; } // Paper - OBFHELPER
+    public int x;
+    public int y;
+    public int z;

     // Paper start
     public boolean isValidLocation() {
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index b173bdccff755664450b280d582cb11c056f8a47..ca84433827d57a1d457fb19ee45f47ae13b7b4ae 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -206,7 +206,7 @@ public class Main {

             convertable_conversionsession.a((IRegistryCustom) iregistrycustom_dimension, (SaveData) object);
             */
-            Class.forName("net.minecraft.server.VillagerTrades");// Paper - load this sync so it won't fail later async
+            Class.forName("net.minecraft.world.entity.npc.VillagerTrades");// Paper - load this sync so it won't fail later async
             final DedicatedServer dedicatedserver = (DedicatedServer) MinecraftServer.spin((thread) -> {
                 DedicatedServer dedicatedserver1 = new DedicatedServer(optionset, datapackconfiguration1, thread, iregistrycustom_dimension, convertable_conversionsession, resourcepackrepository, datapackresources, null, dedicatedserversettings, DataFixers.getDataFixerOH(), minecraftsessionservice, gameprofilerepository, usercache, LoggerChunkProgressListener::new);

diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 2949bdd254e16813543fb98541ab709d4ca6ed3a..4d05887f74e982def940e68bac0788429210b96b 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -2524,7 +2524,7 @@ Sections go from 0..16. Now whenever a section is not empty, it can potentially
         }
     }

-    class DistanceManagerOH extends DistanceManager {
+    public class DistanceManagerOH extends DistanceManager {

         protected DistanceManagerOH(Executor executor, Executor executor1) {
             super(executor, executor1);
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index cb5ba4b890753a70cb024420db1f55a67ef18a33..914f0081f2b26de4402c2babdefb16c4139f3e45 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -115,6 +115,7 @@ import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkGenerator;
+import net.minecraft.world.level.chunk.ChunkSource;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.LevelChunkSection;
@@ -1642,6 +1643,11 @@ public class ServerLevel extends net.minecraft.world.level.Level implements Worl
         this.server.getPlayerList().sendPacketNearby(entityhuman, (double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), 64.0D, this.getDimensionKey(), new ClientboundLevelEventPacket(i, blockposition, j, false));
     }

+    @Override
+    public ServerLevel getMinecraftWorld() {
+        return this;
+    }
+
     @Override
     public void notify(BlockPos blockposition, BlockState iblockdata, BlockState iblockdata1, int i) {
         this.getChunkSourceOH().blockChanged(blockposition);
@@ -1669,7 +1675,7 @@ public class ServerLevel extends net.minecraft.world.level.Level implements Worl
         this.getChunkSourceOH().broadcastIncludingSelf(entity, new ClientboundEntityEventPacket(entity, b0));
     }

-    @Override
+    // @Override
     public ServerChunkCache getChunkSourceOH() {
         return this.chunkSource;
     }
@@ -1739,6 +1745,11 @@ public class ServerLevel extends net.minecraft.world.level.Level implements Worl
         return this.liquidTicks;
     }

+    @Override
+    public ChunkSource getChunkSource() {
+        return chunkSource;
+    }
+
     @Nonnull
     @Override
     public MinecraftServer getServer() {
@@ -1749,7 +1760,7 @@ public class ServerLevel extends net.minecraft.world.level.Level implements Worl
         return this.portalForcer;
     }

-    public StructureManager getStructureManager() {
+    public StructureManager getStructureManagerOH() {
         return this.server.getDefinedStructureManager();
     }

diff --git a/src/main/java/net/minecraft/server/level/WorldGenRegion.java b/src/main/java/net/minecraft/server/level/WorldGenRegion.java
index 5e1716dbbca3e72aeda5c28dc7d0e45ecd411f82..6ad861f7ccb2fe663ae236d609ee18a6f6c9c40d 100644
--- a/src/main/java/net/minecraft/server/level/WorldGenRegion.java
+++ b/src/main/java/net/minecraft/server/level/WorldGenRegion.java
@@ -388,6 +388,11 @@ public class WorldGenRegion implements WorldGenLevel {
     @Override
     public void levelEvent(@Nullable Player entityhuman, int i, BlockPos blockposition, int j) {}

+    @Override
+    public ServerLevel getMinecraftWorld() {
+        return level;
+    }
+
     @Override
     public DimensionType dimensionType() {
         return this.dimensionType;
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index dc94804f912a57391434fe56067fa98871135209..b618bf2e27e2d20b2a544536b8844d0dca31cbeb 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -220,7 +220,7 @@ public class ServerGamePacketListenerImpl implements ServerGamePacketListener {
     private long keepAliveChallenge; private void setKeepAliveID(long keepAliveID) { this.keepAliveChallenge = keepAliveID;}; private long getKeepAliveID() {return this.keepAliveChallenge; };  // Paper - OBFHELPER
     // CraftBukkit start - multithreaded fields
     private volatile int chatSpamTickCount;
-    private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(ServerGamePacketListenerImpl.class, "chatThrottle");
+    private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(ServerGamePacketListenerImpl.class, "chatSpamTickCount");
     private final java.util.concurrent.atomic.AtomicInteger tabSpamLimiter = new java.util.concurrent.atomic.AtomicInteger(); // Paper - configurable tab spam limits
     // CraftBukkit end
     private int dropSpamTickCount;
diff --git a/src/main/java/net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java b/src/main/java/net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java
index 1e7558bb07ce8dbbed1e727e15ef892de46c0b8d..94f2db64882d091e3cb6c5cc8545313465547493 100644
--- a/src/main/java/net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java
+++ b/src/main/java/net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java
@@ -25,13 +25,6 @@ public class CrudeIncrementalIntIdentityHashBiMap<K> implements IdMap<K> {
         this.usedIds = new java.util.BitSet(); // Paper
     }

-    // Paper start - decompile fix
-    @Override
-    public int getId(K k) {
-        return getId(k);
-    }
-    // Paper end
-
     public int getId(@Nullable K k0) {
         return this.getValue(this.indexOf(k0, this.hash(k0)));
     }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 68b116a070ea84f4620cfe4c952c4b893c8edf81..0a8235ce5fe63a579812a06074bea347a6317ec0 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -1174,7 +1174,6 @@ public abstract class Entity implements Nameable, CommandSource, KeyedObject { /
         return this.level.isRainingAt(blockposition) || this.level.isRainingAt(new BlockPos((double) blockposition.getX(), this.getBoundingBox().maxY, (double) blockposition.getZ()));
     }

-    public final boolean isInBubbleColumn() { return isInBubbleColumn(); } // Paper - OBFHELPER
     public boolean isInBubbleColumn() {
         return this.level.getType(this.blockPosition()).is(Blocks.BUBBLE_COLUMN);
     }
@@ -1331,7 +1330,6 @@ public abstract class Entity implements Nameable, CommandSource, KeyedObject { /
         return this.fluidOnEyes == tag;
     }

-    public final boolean isInLava() { return isInLava(); } // Paper - OBFHELPER
     public boolean isInLava() {
         return !this.firstTick && this.fluidHeight.getDouble(FluidTags.LAVA) > 0.0D;
     }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Phantom.java b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
index c8254eb86ce57743d4f476ca47d9d49b4cfe2a72..5127981e66ffe492468963f340099fef4c77fcfb 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Phantom.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
@@ -254,7 +254,7 @@ public class Phantom extends FlyingMob implements Enemy {
                 List<Player> list = Phantom.this.level.getNearbyPlayers(this.attackTargeting, (LivingEntity) Phantom.this, Phantom.this.getBoundingBox().inflate(16.0D, 64.0D, 16.0D));

                 if (!list.isEmpty()) {
-                    list.sort(Comparator.comparing(Entity::getY).reversed());
+                    list.sort(Comparator.comparingDouble((Entity e) -> e.getY()).reversed());
                     Iterator iterator = list.iterator();

                     while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java b/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
index 9209057e14afc0ed33395e8a8b7aae4b0670aa45..6e26eff0fe23fbd26fad09bf81d3d47cdf3ff276 100644
--- a/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
@@ -135,6 +135,10 @@ public abstract class AbstractVillager extends AgableMob implements Npc, Merchan

     }

+    public Level getLevel(){ // Toothpick
+        return this.level;
+    }
+
     protected abstract void rewardTradeXp(MerchantOffer merchantrecipe);

     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
index a060fd3cad693759757dedb1274e5a0aed406999..a42e26e11f40e55051aac4b7bd38f86db64af36e 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
@@ -12,7 +12,8 @@ public abstract class Property<T extends Comparable<T>> {

     private final Class<T> clazz;
     private final String name;
-    private Integer hashCode;
+    private static final java.util.concurrent.atomic.AtomicInteger hashId = new java.util.concurrent.atomic.AtomicInteger(1); // Paper - only one instance per configuration
+    private Integer hashCode = 92821 * hashId.getAndIncrement(); // Paper - only one instance per configuration;
     private final Codec<T> codec;
     private final Codec<Property.Value<T>> valueCodec;

@@ -63,8 +64,6 @@ public abstract class Property<T extends Comparable<T>> {
         return this == object; // Paper - only one instance per configuration
     }

-    private static final java.util.concurrent.atomic.AtomicInteger hashId = new java.util.concurrent.atomic.AtomicInteger(1); // Paper - only one instance per configuration
-    private final int hashCode = 92821 * hashId.getAndIncrement(); // Paper - only one instance per configuration
     public final int hashCode() {
         if (this.hashCode == null) {
             this.hashCode = this.generateHashCode();
diff --git a/src/main/java/net/minecraft/world/level/lighting/LayerLightEngine.java b/src/main/java/net/minecraft/world/level/lighting/LayerLightEngine.java
index 12213eb971e0c7bbb02ff4794c4dc0acbf31e2ca..dffd2b3927f72d9a17b582e5a10950ff18c67660 100644
--- a/src/main/java/net/minecraft/world/level/lighting/LayerLightEngine.java
+++ b/src/main/java/net/minecraft/world/level/lighting/LayerLightEngine.java
@@ -24,7 +24,7 @@ public abstract class LayerLightEngine<M extends DataLayerStorageMap<M>, S exten
     protected final LightLayer layer;
     protected final S storage;
     private boolean runningLightUpdates;
-    protected final BlockPos.MutableBlockPosition pos = new BlockPos.MutableBlockPosition(); protected final BlockPos.MutableBlockPosition pos = pos; // Paper
+    protected final BlockPos.MutableBlockPosition pos = new BlockPos.MutableBlockPosition();
     private final long[] lastChunkPos = new long[2];
     private final ChunkAccess[] lastChunk = new ChunkAccess[2]; // Paper

diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer.java
index 793f6a973584371cb1a596ff9d6b1b43ea577e0f..46dab182dd6d3ffae60f77f7ac22cec282e45a71 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer.java
@@ -42,7 +42,7 @@ public abstract class LootPoolEntryContainer implements ComposableEntryContainer

         // CraftBukkit start
         @Override
-        public void a(JsonObject jsonobject, T t0, JsonSerializationContext jsonserializationcontext) { // Paper - remove final
+        public void serialize(JsonObject jsonobject, T t0, JsonSerializationContext jsonserializationcontext) { // Paper - remove final
             if (!org.apache.commons.lang3.ArrayUtils.isEmpty(t0.conditions)) {
                 jsonobject.add("conditions", jsonserializationcontext.serialize(t0.conditions));
             }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
index 9287a2178e02b7a0c11c07fd0100175b6592276f..8db104f5045e0c5b1cd16508099e2c45735c3bc1 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
@@ -163,7 +163,7 @@ public abstract class LootPoolSingletonContainer extends LootPoolEntryContainer
             }
             // This is vanilla
             float qualityModifer = (float) getQuality() * f;
-            double baseWeight = (getWeight() + qualityModifer);
+            double baseWeight = (LootPoolSingletonContainer.this.getWeight() + qualityModifer);
             if (com.destroystokyo.paper.PaperConfig.useAlternativeLuckFormula) {
                 // Random boost to avoid losing precision in the final int cast on return
                 final int weightBoost = 100;
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index bac292e6d8e6cdb239d8accd21eaa25022f5640f..992d87e59273c9f2b5931edad97738d1fb712c15 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -245,7 +245,7 @@ public class Main {
                 }

                 if (Main.class.getPackage().getImplementationVendor() != null && System.getProperty("IReallyKnowWhatIAmDoingISwear") == null) {
-                    Date buildDate = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'").parse(Main.class.getPackage().getImplementationVendor()); // Paper
+                    Date buildDate = new SimpleDateFormat("yyyyMMdd-HHmm").parse(Main.class.getPackage().getImplementationVendor()); // Paper

                     Calendar deadline = Calendar.getInstance();
                     deadline.add(Calendar.DAY_OF_YEAR, -7);
@@ -315,9 +315,9 @@ public class Main {
             tryPreloadClass("com.destroystokyo.paper.event.player.PlayerConnectionCloseEvent");
             tryPreloadClass("com.destroystokyo.paper.event.entity.EntityRemoveFromWorldEvent");
             // Minecraft, seen during saving
-            tryPreloadClass("net.minecraft.server.LightEngineLayerEventListener$Void");
-            tryPreloadClass("net.minecraft.server.LightEngineLayerEventListener");
-            tryPreloadClass("net.minecraft.server.ExceptionSuppressor");
+            tryPreloadClass("net.minecraft.world.level.lighting.LayerLightEventListener$DummyLightLayerEventListener");
+            tryPreloadClass("net.minecraft.world.level.lighting.LayerLightEventListener");
+            tryPreloadClass("net.minecraft.util.ExceptionCollector");
             // Paper end
         }
     }
